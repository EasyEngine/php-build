Description: support cross-compilation on multi-arch systems
Author: Dimitri John Ledkov <xnox@ubuntu.com>

Index: cmake-3.0.2/Modules/CMakeDetermineSystem.cmake
===================================================================
--- cmake-3.0.2.orig/Modules/CMakeDetermineSystem.cmake
+++ cmake-3.0.2/Modules/CMakeDetermineSystem.cmake
@@ -104,6 +104,13 @@ if(CMAKE_TOOLCHAIN_FILE)
     message(FATAL_ERROR "Could not find toolchain file: ${CMAKE_TOOLCHAIN_FILE}")
     set(CMAKE_TOOLCHAIN_FILE "NOTFOUND" CACHE FILEPATH "The CMake toolchain file" FORCE)
   endif()
+else()
+  # on multiarch debian systems cross-compilation has standard names &
+  # paths thus we can auto-detect all settings required to enable
+  # cross-compilation on debian systems out of the box
+  if(EXISTS "/etc/debian_version")
+    include(${CMAKE_ROOT}/Modules/MultiArchCross.cmake OPTIONAL RESULT_VARIABLE _INCLUDED_MULTIARCH_TOOLCHAIN_FILE)
+  endif()
 endif()
 
 
Index: cmake-3.0.2/Modules/CMakeDetermineCompiler.cmake
===================================================================
--- cmake-3.0.2.orig/Modules/CMakeDetermineCompiler.cmake
+++ cmake-3.0.2/Modules/CMakeDetermineCompiler.cmake
@@ -12,6 +12,10 @@
 # (To distribute this file outside of CMake, substitute the full
 #  License text for the above reference.)
 
+if(EXISTS "/etc/debian_version")
+  include(${CMAKE_ROOT}/Modules/MultiArchCross.cmake OPTIONAL RESULT_VARIABLE _INCLUDED_MULTIARCH_TOOLCHAIN_FILE)
+endif()
+
 macro(_cmake_find_compiler lang)
   # Use already-enabled languages for reference.
   get_property(_languages GLOBAL PROPERTY ENABLED_LANGUAGES)
Index: cmake-3.0.2/Modules/FindPkgConfig.cmake
===================================================================
--- cmake-3.0.2.orig/Modules/FindPkgConfig.cmake
+++ cmake-3.0.2/Modules/FindPkgConfig.cmake
@@ -30,6 +30,10 @@
 ### Common stuff ####
 set(PKG_CONFIG_VERSION 1)
 
+if(EXISTS "/etc/debian_version")
+  include(${CMAKE_ROOT}/Modules/MultiArchCross.cmake OPTIONAL RESULT_VARIABLE _INCLUDED_MULTIARCH_TOOLCHAIN_FILE)
+endif()
+
 # find pkg-config, use PKG_CONFIG if set
 if((NOT PKG_CONFIG_EXECUTABLE) AND (NOT "$ENV{PKG_CONFIG}" STREQUAL ""))
   set(PKG_CONFIG_EXECUTABLE "$ENV{PKG_CONFIG}" CACHE FILEPATH "pkg-config executable")
Index: cmake-3.0.2/Modules/GNUInstallDirs.cmake
===================================================================
--- cmake-3.0.2.orig/Modules/GNUInstallDirs.cmake
+++ cmake-3.0.2/Modules/GNUInstallDirs.cmake
@@ -72,6 +72,10 @@
 
 # Installation directories
 #
+if(EXISTS "/etc/debian_version")
+  include(${CMAKE_ROOT}/Modules/MultiArchCross.cmake OPTIONAL RESULT_VARIABLE _INCLUDED_MULTIARCH_TOOLCHAIN_FILE)
+endif()
+
 if(NOT DEFINED CMAKE_INSTALL_BINDIR)
   set(CMAKE_INSTALL_BINDIR "bin" CACHE PATH "user executables (bin)")
 endif()
Index: cmake-3.0.2/Modules/AutogenInfo.cmake.in
===================================================================
--- cmake-3.0.2.orig/Modules/AutogenInfo.cmake.in
+++ cmake-3.0.2/Modules/AutogenInfo.cmake.in
@@ -13,6 +13,9 @@ set(AM_CMAKE_SOURCE_DIR "@CMAKE_SOURCE_D
 set(AM_QT_MOC_EXECUTABLE "@_qt_moc_executable@")
 set(AM_QT_UIC_EXECUTABLE "@_qt_uic_executable@")
 set(AM_QT_RCC_EXECUTABLE "@_qt_rcc_executable@")
+if(DEFINED ENV{DEB_BUILD_MULTIARCH} AND DEFINED ENV{DEB_HOST_MULTIARCH} AND "@_qt_moc_executable@" MATCHES "/usr/lib/$ENV{DEB_HOST_MULTIARCH}/qt5/bin/moc")
+  set(AM_QT_MOC_EXECUTABLE "/usr/lib/$ENV{DEB_BUILD_MULTIARCH}/qt5/bin/moc")
+endif()
 set(AM_CMAKE_CURRENT_SOURCE_DIR "@CMAKE_CURRENT_SOURCE_DIR@/")
 set(AM_CMAKE_CURRENT_BINARY_DIR "@CMAKE_CURRENT_BINARY_DIR@/")
 set(AM_QT_VERSION_MAJOR "@_target_qt_version@")
